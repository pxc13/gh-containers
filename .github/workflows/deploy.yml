name: Deployment (Container)
on:
  push:
    branches:
      - master
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
#   container: node:16 # has to be available on public repository in dockerhub, in this instance, node v16
    container: 
      image: node:16 # an alternative to the above, important if there is more information that is needed, like an env variable
    env:
#     MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CONNECTION_PROTOCOL: mongodb # changing here because mongodb specific setting; not always necessary
#     MONGODB_CLUSTER_ADDRESS: cluster0.ntrwp.mongodb.net
      MONGODB_CLUSTER_ADDRESS: mongodb # because running in container, can just use service label as address
#     MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }} # secrets created in repo/environment
#     MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }} # secrets created in repo/environment
      MONGODB_USERNAME: root # these also must be the credentials that are used for connecting thereafter
      MONGODB_PASSWORD: example # so connection to DB can be accessed successfully
      PORT: 8080
    services: # identifier follows (key can be anything)
      mongodb: # service-specific keys follow, defined by github actions - image must be first
        image: mongo # official image on dockerhub - needs additional configuration, in this case, env is mandatory
        env: # we are spinning up a new env, so need credentials
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example # this is only a test DB, so values don't need to be complicated
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
